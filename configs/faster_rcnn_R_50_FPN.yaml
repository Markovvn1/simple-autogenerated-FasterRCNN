name: "FASTER_RCNN"
FASTER_RCNN:
  BACKBONE:
    name: "RESNET"  # Тип используемого backbone. {"RESNET"}
    RESNET:  # TODO: freeze at
      # Параметры для генерации ResNet
      depth: 50  # Глубина сети. {18, 34, 50, 101, 152}
      norm: "BN"  # Тип слоя нормализации для conv. {"None", "BN", "FrozenBN"}
      num_groups: 1  # Количество групп для сверточных 3x3 слоев
      width_per_group: 64  # Количество каналов в каждой группе
      stem_out_channels: 64  # Количество каналов на выходе первого слоя
      res2_out_channels: 256  # Количество каналов на выходе второго слоя
      stride_in_1x1: True  # Будет ли stride проходить в слое 1x1 или же в слое 3x3
      res5_dilation: 1  # dilation в последнем слое. {1, 2}
      out_features: ["res2", "res3", "res4", "res5"]  # Какие слои будут выводиться.
  NECK:
    name: "FPN"  # Тип используемого neck. {"FPN"}
    FPN:
      norm: "None"  # Тип слоя нормализации для conv. {"None", "BN", "FrozenBN"}
      fuse_type: "sum"  # Способ объединения слоев. {"sum", "avg"}
      out_channels: 256  # Количество слоев на выходе
  PROPOSAL_GENERATOR:
    name: "RPN"  # Тип используемого PROPOSAL_GENERATOR. {"RPN"}
    RPN:
      min_box_size: 0
      box_transform_weights: [1.0, 1.0, 1.0, 1.0]  # Коэффициенты на которые будут умножаться значения локализации
      ANCHOR_GENERATOR:  # Параметры генератора anchors
        ratios: [0.5, 1.0, 2.0]
        sizes: [[32], [64], [128], [256], [512]]
      LOSS:
        global_weight: 2.0  # Вклад ошибки RPN модуля в общую ошибку сети
        box_reg_weight: 0.5  # Вклад ошибки локализации в ошибку RPN модуля
        bbox_reg_loss_type: "giou"  # Тип ошибки для уточнения смещения. {"smooth_l1", "giou"}
        smooth_l1_beta: 1.0  # Используется только если bbox_reg_loss_type == "smooth_l1"
      TRAIN:  # Парамеры для обучения
        pre_topk: 2000
        nms_thresh: 0.7
        post_topk: 1000
        batch_size_per_image: 256  # Количество изображений используемых для обучения RPN
        positive_fraction: 0.5  # Процент положительных изображений в минибатче
        iou_thresholds: [0.3, 0.7]  # Пороги для определения является ли anchor background или foreground
      TEST:  # Параметры для тестирования
        pre_topk: 1000
        nms_thresh: 0.7
        post_topk: 1000
  ROI_HEADS:
    name: "STANDARD"
    STANDARD:
      is_agnostic: False  # Если False, то для каждого класса будет использоваться свой предсказатель, иначе буде использоваться общий
      box_transform_weights: [10.0, 10.0, 5.0, 5.0]  # Коэффициенты на которые будут умножаться значения локализации
      POOLER:
        type: "RoIAlignV2"  # Тип pooler. {"RoIAlign", "RoIAlignV2", "RoIPool"}
        resolution: 7  # Выходной размер pooler
        sampling_ratio: -1  # see torchvision.ops.roi_align
      BOX_HEAD:
        name: "FastRCNNConvFC"
        FastRCNNConvFC:
          norm: "None"  # Тип слоя нормализации для conv. {"None", "BN", "FrozenBN"}
          conv: []  # Количество выходных каналов в conv-слоях
          fc: [1024, 1024]  # Количество каналов в FC-слоях
      LOSS:
        global_weight: 2.0  # Вклад ошибки ROI_HEAD модуля в общую ошибку сети
        box_reg_weight: 0.5  # Вклад ошибки локализации в ошибку ROI_HEAD модуля
        bbox_reg_loss_type: "giou"  # Тип ошибки для уточнения смещения. {"smooth_l1", "giou"}
        smooth_l1_beta: 1.0  # Используется только если bbox_reg_loss_type == "smooth_l1"
      TRAIN:
        batch_size_per_image: 512  # Количество изображений используемых для обучения ROI_HEAD
        positive_fraction: 0.25  # Процент положительных изображений в минибатче
        append_gt_to_proposal: True  # Добавить ground truth коробки в список предсказанных RPN (говорят ускоряет обучение)
        iou_thresholds: [0.5, 0.5]  # Пороги для определения является ли prop background или foreground
      TEST:
        nms_thresh: 0.5  # Допустимый показатель IOU для результатов
        score_thresh: 0.85  # Коробки, имеющие меньший результат, будут удалены